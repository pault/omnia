* Ecore tests to ensure opcode and htmlcode errors are properly
   reported - that is that Backside errors appeal on the output page
   if the user isGod and is otherwise logged.  Also that runtime
   errors are reported inline.  To do this, we can create opcode and
   htmlcode with errors in and ensure that these errors are reported
   as we expect.

* Move parse/run code into separate classes under
   Everything/HTML/Something-or-other 

* Allow Gigantic Node Lister to order by Maintainer, createtime etc.

* Amend ecore to ensure XHTML 1.0 compliance

* Amend FromObject.pm so that form objects return labels with a 'for'
   attribute and id in the input tag.

* Change default DB (for all DBs) setup so default encoding is utf8

* Documentation - Ecore should be self documenting

* Documentation - allow POD of Everything::HTML to be accessed from
   Ecore to assist front-end developers

* Write tests for t/TEST to test for:
** login/logout
** cookie setting,
** node editing
** well-formed XHTML.

* Move Perl out of containers into htmlcode nodes to ease frontend
   development

* Explore a templating systems to either replace containers or run as
   another response class - consider Template Toolkit and
   HTML::Seamstress.

* Export nodeballs in utf-8 rather than latin 1

* DB - normalise node table

* Allow nodeballs to be exported through a web browser

* Allow DB.pm and subclasses to set up DB schema as it sees fit.  This
   includes:

   ** removing sql tables from nodeballs
   ** allowing schemae that are optimised for each of the databases

* Allow retrieval of objects other than nodes from the DB e.g. links

   This may involve creating objects that are a superclass of nodes,
   i.e. nodes are an 'object' and links are also 'objects', of making
   links nodes.  In the latter case, nodes will have to be slimmed
   down.

* Port enote and preview

* Implement Captcha

  Get rid of comment spam  
  Probably use Authen::Captcha

* Implement session keys

   Track user sessions deal with comment spam etc