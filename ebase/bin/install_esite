#!/usr/bin/perl -w

use strict;

use Everything::CmdLine qw/get_options usage_options confirm_yn readline_quick abs_path/;
use Everything::Storage::Nodeball;
use Everything::Install;
use File::Copy;
use File::Spec;
use IO::File;

use Carp;

$SIG{__DIE__} = \&Carp::confess;
sub main
{

    my $options = process_commandline();

    my $installer = Everything::Install->new;

    if ( $$options{edir} ) {

      $installer->set_data_dir( $$options{ edir } );
    } else {

      my $edir = $installer->guess_everything_dir( $$options{ edir } );

      $$options{ edir } = get_everything_dir( $installer, $edir );

      $installer->set_data_dir( $$options{ edir } );
    }


    ## find core system

    if ( $$options{ nocoreinstall } ) {

      $installer->install_core(0);

    } else {

      $installer->install_core(1);

      my $core_try = File::Spec->catfile( $$options{ edir }, 'nodeballs', 'core' );

      my $core_system = $core_try if -e $core_try;

      unless ( $core_system ) {
	do {
	  my $core_try2 = readline_quick( "I've tried to find the core system at $core_try, but there's nothing there.  I need to know where the core system is to proceed with the installation.  Where is it?");
	  die "Can't find core system!" unless $core_try2;
	  $core_system = $core_try2 if -e $core_try2;
	} until ( $core_system );
      }

      my $core_nodeball = Everything::Storage::Nodeball->new( nodeball => $core_system ) || die "Can't get valid nodeball, $!";

      $installer->set_nodeball( $core_nodeball );
    }

### get database options

    if ( $$options{ type } ) {
	$installer->STORAGETYPE( $$options{ type } );
    } else {
	my $type;
	do {
	    my $guess = readline_quick('What database type will you use? Valid options are Pg, mysql or sqlite.');
	    $type = $guess if $guess eq 'Pg' || $guess eq 'mysql' || $guess eq 'sqlite';
	} until ( $type );
	$$options{ type } = $type;
	$installer->STORAGETYPE( $type );
    }


    if ( $$options{ database } ) {

	$installer->set_db_name ($$options{ database });
    } else {

	my $name;

	do {
	    $name = readline_quick('What name does the database have? In the case of sqlite this will be the path and file name.');
	    } until ( $name );

	    $$options{ database } = $name;
	    $installer->set_db_name( $name );

    }

    if ( $installer->STORAGETYPE ne 'sqlite' ) {

	if ( $$options{ user } ) {
	    $installer->set_db_user ( $$options{ user } );
	} else {
	    my $user;

	    do {
		$user = readline_quick('What user will access the database?');
	    } until ( $user );

	    $$options{ user } = $user;
	    $installer->set_db_user( $user );

	}

	if ( $$options{ password } ) {
	    $installer->set_db_pass ( $$options{ password } );
	} else {
	    my $pass;

	    do {
		$pass = readline_quick('What will the password be for this user?');
	    } until ( $pass );

	    $$options{ password } = $pass;
	    $installer->set_db_pass( $pass );

	}

	if ( $$options{ host } ) {
	    $installer->set_db_host( $$options{ host } );
	} else {

	    $$options{ host } = 'localhost';
	    $installer->set_db_host( 'localhost' );
	}

	$installer->set_db_port( $$options{ port } ) if $$options{ port };

    }


## get apache user and group

    if ( $$options{ owner }) {

	$installer->set_web_user( $$options{ owner } );
    } else {
	
      my $default = $installer->guess_apache_user;
      my $defaultstr = "[$default]" if $default;
      my $user = readline_quick("What user does Apache run as? $defaultstr");
      $user ||= $default;

      $options->{owner} =  $user;
      $installer->set_web_user( $user );

    }

    if ( $$options{ group } ) {
	$installer->set_web_group( $$options{ group } );
    } else {
	$$options{group} =  $$options{ owner };
	$installer->set_web_group( $$options{ group } );

    }
## create the web directory

    $$options{ webdir } = get_web_dir( $installer, $$options{ webdir } );

    $installer->set_web_dir( $$options{ webdir} );

## create 'incoming' directories
    create_incoming( $installer );



## create index.pl (if running as CGI)

    $installer->modify_apache_conf( 1 ) unless $$options{ noapacheconf };

    my $apache_conf = create_web_files( $installer, $options );

    print "Your apache configuration is stored at $apache_conf.";

## amend apache conf
    amend_apache_conf( $installer, $apache_conf ) if $installer->modify_apache_conf;

## create database and sql user

    exit 0 unless $installer->install_core;

    print "\n\nNow we'll try to install the core system into a database.\n\n";

    if ( $installer->STORAGETYPE ne 'sqlite' ) {


	if ( $$options{ db_rootuser } ) {
	    $installer->set_db_rootuser ( $$options{ db_rootuser } );
	} else {
	    my $rootuser;

	    do {
		$rootuser = readline_quick('What is the name for the database super user?');
	    } until ( $rootuser );

	    $$options{ db_rootuser } = $rootuser;
	    $installer->set_db_rootuser( $rootuser );

	}

	if ( $$options{ db_rootpass } ) {
	    $installer->set_db_rootpass ( $$options{ db_rootpass } );
	} else {
	    my $rootpass;

	    do {
		$rootpass = readline_quick('What password does the super user have?');
	    } until ( $rootpass );

	    $$options{ db_rootpass } = $rootpass;
	    $installer->set_db_rootpass( $rootpass );

	}

    }

    print "Creating database and user....";
    $installer->create_storage( $options ) ;
    print " done.\n";

## install core system nodeball

    print "Installing SQL tables.... ";
    $installer->install_sql_tables;
    print " done.\n";

    print "Updating existing nodes.... ";
    $installer->update_existing_nodes;
    print " done.\n";

    print "Installing node type nodes.... ";
    $installer->install_nodetypes;
    print " done.\n";

    print "Install all other nodes (this may take awhile) ..... ";
    $installer->install_nodes;
    print " done.\n";

    print "All done. Enjoy!\n\n";

    exit 0;
}

sub process_commandline {

my $options = get_options(
    usage(),
    [
        'group|g:s',         'owner|o:s',
        'webdir=s',          'edir=s',
        'elib=s',            'db_rootuser:s',
        'db_rootpass:s',     'noapacheconf',
        'nocoreinstall',
    ]
);

$$options{database} ||= $ARGV[0];

return $options;
}

sub usage {

my $usagestr = <<USAGE;
Usage: install_esite [OPTIONS] [DATABASE]
Options include:
[--noapacheconf]             don't muck with the apache.conf files
[--nocoreinstall]            don't install the core system

[--webdir=WEB_DIR]              specify where the web directory should go	
[--edir=EVERYTHING_DIR]      specify Everything install directory 
[--db_rootuser=ROOTDB_PASS]  db root user
[--db_rootpass=ROOTDB_PASS]     db root password    

[-g=GROUP]                   the user group who should own created files
[-o=OWNER]                   the user account who should own created files

Note the DATABASE argument is optional if you have specified the --database option.

USAGE

return $usagestr;
}

sub get_everything_dir {


  my ( $installer, $edir )= @_;
    if ( $edir ) {
    $edir = ''
      unless confirm_yn("Ok to use $edir for Everything data directory?");

    }

    while ( not $edir ) {
        my $dir = readline_quick("Where do you have the Everything data files installed? ");
        die "I can't find files necessary for install!" unless $dir;

        if ( $installer->check_everything_dir($dir) ) {
            $edir = $dir;
        }
        else {
            print "This directory does not have the required files!\n";
        }
    }

  return $edir;
}

sub get_web_dir {

    my ( $installer, $webdir ) = @_;

    my $default = $installer->guess_web_dir;

    my $defaultstr = "\[$default\]" if $default;

    while ( not $webdir ) {
        $webdir ||=
          readline_quick( "Where is your web directory? This directory "
              . "should be accessable by apache\n$defaultstr" );
        $webdir ||= $default;

        # default goes away after first pass
        $defaultstr = '';
        $default    = '';

        if ( -e $webdir
            and ( not -r $webdir or not -x $webdir or not -w $webdir ) )
        {
            print "I don't have access to '$webdir'! "
              . "Please chmod the directory +rwx for me or use another!\n";
            $webdir = '';
        }
        else {
            last;
        }
    }

    if ( $webdir and not -d $webdir ) {
        if ( confirm_yn("$webdir doesn't exist, should I create it?") ) {
            die "could not create directory '$webdir'!: $!"
              unless mkdir( $webdir, 0755 );
        }
        else {
            exit 0;
        }
    }

return abs_path( $webdir );
}

sub create_web_files {
  my ( $installer, $options ) = @_;

  my $apache_conf;

    if ( confirm_yn ( 'Will you be running as a CGI script' )) {

	$installer->create_index( $options );

	$apache_conf = $installer->create_apache_cgi_conf( $$options{edir}, $$options{webdir} );

	# add to apache.conf
    } else {
	my $location = readline_quick('What location should the handler run from? Default is none');
	$options->{location} = $location if $location;
	## create apache.conf (with handler if not running as CGI)
	$apache_conf = $installer->create_apache_handler_conf( $options );
      }

	 return $apache_conf;
}

sub create_incoming {
  my ( $installer ) = @_;
  my $webdir = $installer->get_web_dir;

	 if ( confirm_yn( "Would you like me to create an "
              . "incoming directory where you can "
              . "upload images and files?" )
	    )
	 {
	 $installer->create_incoming( $webdir, $installer->get_web_user );
}


}

sub amend_apache_conf {
  my ( $installer, $apache_conf ) = @_;

	 if (confirm_yn("Shall I try to add this to your apache configuration?")) {
	   my $conf = $installer->guess_apache_conf;

	   if ( $conf->[0] eq 'file') {

	     if ( confirm_yn ( "I'm guessing that your configuration file for apache is $$conf[1].  Shall I append the line 'Include $apache_conf' to it?" ) ) {

	       my $fh = IO::File->new( ">> $$conf[1]" );
	       print $fh "Include $apache_conf";

	     } else {
	       print "OK, you can do it yourself later.  Don't forget the configuration is in $apache_conf.\n";

	     }

	   } else {

		 if ( confirm_yn(  "I've found that you have a configuration directory at $$conf[1].  Shall I copy $apache_conf over to it?" ) ) {
		     my ($vol, $dir, $file ) = File::Spec->splitpath( $apache_conf );
		     copy ($apache_conf, File::Spec->catfile( $$conf[1], $file ));

		 } else {
		     print "OK, you can do it yourself later. Don't forget your apache configuration is at $apache_conf.\n";
		 }
	       }
	 }


}

main unless caller();

1;
