#!/usr/bin/perl -w

use strict;

use DBI;
use File::Copy;
use File::Spec;
use Getopt::Long;
use Term::ReadKey;

use Everything;
use Everything::Nodeball;

my $usagestr = <<USAGE;
Usage: install_esite [OPTIONS] <DATABASE>
Options include:
[--nocreatedb]            skip database creation 
[--nocreateuser]          skip user creation/grant
[--noapacheconf]          don't muck with the apache.conf files
[--nocoreinstall]         don't install the core system

[--web=WEB_DIR]           specify where the web directory should go	
[--edir=EVERYTHING_DIR]   specify Everything install directory 
[--rootpass=ROOTDB_PASS]  root mysql password 
	
[-g=GROUP]                the user group who should own created files
[-o=OWNER]                the user account who should own created files
[-h=SQLHOST]              remote host for sql database	
[-u=SQLUSER]              sql user to create/grant database access
[-p=SQLPASS]              sql user's password	

USAGE

GetOptions(
	'h=s'           => \$OPTIONS{host},
	'g:s'	        => \$OPTIONS{group},
	'o:s'	        => \$OPTIONS{owner},
	'p:s'           => \$OPTIONS{password},
	'u=s'           => \$OPTIONS{user},
	'web=s'         => \$OPTIONS{webdir},
	'edir=s'        => \$OPTIONS{edir},
	'elib=s'        => \$OPTIONS{libdir},
	'rootpass:s'    => \$OPTIONS{rootpass},
	'nocreatedb'    => \$OPTIONS{nocreatedb},
	'noapacheconf'  => \$OPTIONS{noapacheconf},
	'nocreateuser'  =>\$OPTIONS{nocreateuser},
	'nocoreinstall' => \$OPTIONS{nocoreinstall},
);
	
my $defaults = { 
	user     => '', 
	host     => '', 
	owner    => 'nobody',
	group    => 'nobody',
	password => '-1',  #speshul, 'cuz we allow blank passwords
};

foreach (keys %$defaults) {
	$OPTIONS{$_} = $$defaults{$_} unless defined $OPTIONS{$_};
}

if (not @ARGV or @ARGV > 1) {
	print $usagestr; 
	exit;
}
my ($database) = @ARGV;

sub RLquick {
	my ($question) = @_;
	print "$question ";
	my $result = ReadLine 0;
	chomp $result;
	$result;
}

sub checkEdir
{
	my ($dir) = @_;

	return unless $dir;
	my @reqddirs = qw(nodeballs web images tables);
	
	foreach (@reqddirs)
	{
		return 0 unless -d File::Spec->catdir( $dir, $_ );
	}
	return 1;
}

#
#
#	purpose
#		make sure that the $OPTIONS{edir} setting points to where our
#		core system, images, web files, etc exist
#	
sub getEverythingDir {
	#they might have specified it in options
	return if checkEdir($OPTIONS{edir});

	#this file comes in the everything/bin directory.  Take the dir
	#of this script and try the parent directory
	my $script = $0;
	$script =~ s/\/[^\/]+$/\/../;
	
	#try the following directories
	my @trythese = qw(. .. /usr/local/everything /usr/share/everything $script);
	foreach (@trythese) {
		if (checkEdir($_)) {
			$OPTIONS{edir} = absPath $_;
			print "found Everything install at $_\n";
			#return 1;
		}
	}

	unless (confirmYN("Ok to use $OPTIONS{edir} for Everything directory?")) {
		$OPTIONS{edir} = "";
	}

	while (not $OPTIONS{edir}) {	
		my $dir = RLquick("Where do you have the Everything installed? ");
		if (not $dir) { die "I can't find files necessary for install!" }
		if (checkEdir($dir)) { 
			$OPTIONS{edir} = $dir;
			return 1;
		} else {
			print "This directory does not have the required files!\n";
		}
	}
}

sub createDatabase {
	my ($dbh, $dbname) = @_;
	
	my $csr = $dbh->prepare('show databases');
	$csr->execute;
	
	my $dbfound = 0;
	while (my ($tbname) = $csr->fetchrow()) {
		$dbfound = 1 if $tbname eq $dbname;
	}

	print "Creating new database '$dbname'\n";
	if (not $dbfound) {
		return $dbh->do("create database $dbname");
	} else {
		my $nukeit = confirmYN("A database '$dbname' already exists!\n  Do you want me to drop it?");

		if ($nukeit) {
			$dbh->do("drop database $dbname") or warn "couldn't drop database $dbname";
			return $dbh->do("create database $dbname"); 

		} else { 
			warn "A database $dbname already exists!";
			return 0; 
		}
	}
}

sub setupSqlUser {
	my ($dbh, $database) = @_;
	
	my $existsuser = 0;
	
	my $user = $OPTIONS{user};
	my $pass = $OPTIONS{password};
	my $host = $OPTIONS{host};

	$user ||= RLquick("Which SQL user do you want to control '$database' [root]");
	$user ||= "root";

	ReadMode('noecho');
	while ($pass eq -1) {
		my ($conf1, $conf2);
		$conf1 = RLquick("\nPlease specify the password for this user: [none]");
		$conf2 = RLquick("\nConfirm password:") if $conf1;

		if ($conf1 and $conf2) {
			if ($conf1 eq $conf2) {
				$pass = $conf1;
				last;
			} else {
				print "your passwords don't match!\n";
			}
		} elsif (not $conf1 and not $conf2) {
			#blank passwd -- not secure, but I can't complain
			$pass = "";
			last;
		} 
	}
	print "\n";
	ReadMode('normal');

	$host ||= RLquick "Please specify the host for this user [localhost]";
	$host ||= "localhost";

	@OPTIONS{'user', 'password'} = ($user, $pass);
	return if $user eq 'root';

	my $csr = $dbh->prepare(
		'select password from user where User = ? and Host = ?' );

	$csr->execute( $user, $host );
	if (my ($userpass) = $csr->fetchrow())
	{
		my $csr2=$dbh->prepare('select PASSWORD('.$dbh->quote($pass).')');
		$csr2->execute;
		my ($cp) = $csr2->fetchrow();
		unless ($cp eq $userpass) {
			print "\nUser '$user' exists, but doesn't match your password!\n";
			exit 0;
		}
		$csr2->finish;
	}
	$csr->finish;

	$dbh->do("GRANT ALL PRIVILEGES
		ON $database.*
		TO $user\@$host
		IDENTIFIED BY '$pass'") or die "couldn't create user '$user'!";


	print "User '$user' created!\n";
}


sub createWebdir {
	my $webdir;
	$webdir = $OPTIONS{webdir};

	my @defaults = qw(/usr/local/apache/htdocs /home/httpd/html /var/www ~/public_html);

	my $default;
	foreach (@defaults) {
		$_ = absPath $_;
		if (-d and -w and -x) {
			$default = $_;
			last;
		}
	}

	my $defaultstr = "";
	$defaultstr = "\[$default\]" if $default;

	while (not $webdir) {
		$webdir ||= RLquick("Where is your web directory? This directory should be accessable by apache\n$defaultstr");
		$webdir ||= $default; 

		$defaultstr = "";  #default goes away after first pass
		$default = "";
		
		if (-e $webdir and (not -r $webdir or not -x $webdir or not -w $webdir)) {
			print "I don't have access to '$webdir'! Please chmod the directory +rwx for me or use another!"; 
			$webdir = "";
		} else {
			last;
		}
	}
	if ($webdir and not -d	$webdir) {
		if (confirmYN("$webdir doesn't exist, should I create it?")) {
			if (not mkdir($webdir, 0755)) {
				die "could not create directory '$webdir'!";
			} else {
			}
		} else { exit 0; } 
	}
	$OPTIONS{webdir} = absPath $webdir;
	"";
}

sub createIndex
{
	my $infile  = File::Spec->catfile( $OPTIONS{edir}, 'web', 'index.in' );
	my $outfile = File::Spec->catfile( $OPTIONS{webdir}, 'index.pl' );

	my %connection;
	@connection{ qw( db_name user password host  )} =

		# escape non-escaped single quotes, avoid undef values
		map { $_ = defined $_ ? $_ : ''; s!(?<=\\)'!\\'!g; $_ } 

		$database, @OPTIONS{qw( user password host )};

	local (*INDEX, *OUTDEX);

	my $libpath = '';
	if ($OPTIONS{libdir}) {
		die "Can't find Everything.pm in $OPTIONS{libdir}!"
			unless -e File::Spec->catfile( $OPTIONS{libdir}, 'Everything.pm' );
		$libpath = qq|\nuse lib "$OPTIONS{libdir}"\n|;
	}

	open INDEX, $infile or
		die "Cannot read $infile, the Everything directory might be wrong: $!";
	open OUTDEX, "> $outfile" or die "Cannot write to '$outfile': $!";
	print OUTDEX scalar <INDEX>, $libpath;

	while (<INDEX>) {
		s/#(DB_NAME|USER|PASSWORD|HOST)#/$connection{ lc $1 }/;
		print OUTDEX $_;
	}

	chmod 0741, $outfile;
	my $uid = getpwnam( $OPTIONS{owner} );
	my $gid = getgrnam( $OPTIONS{group} );
	chown $uid, $gid, $outfile;
}

sub createIncoming {
	
	my @apacheusers = qw(apache nobody);
	my $default;
	foreach (@apacheusers) {
		if (getpwnam($_)) {
			$default = $_;	
		}
	}

	my $defaultstr = "[$default]" if $default;

	my $user;
	do {
	  return unless confirmYN("Would you like me to create an $OPTIONS{webdir}\/incoming directory where you can upload images and files?");

	  mkdir($OPTIONS{webdir}."/images/incoming", 0755);	
	  
	  $user = RLquick("What user does Apache run as? $defaultstr");
	  $user ||= $default;
	  if (not getpwnam($user)) { warn "It doesn't look like user '$user' exists!" }
	} while (not $user or not getpwnam($user));


	mkdir ($OPTIONS{webdir}."/incoming", 0755);
	chown((getpwnam($user))[2,3], $OPTIONS{webdir}."/incoming"); 
		
	print "$OPTIONS{webdir}\/incoming created and chown to $user!\n";
}


sub installBasenodes {
	my $cmdline = "cat $OPTIONS{edir}/tables/*.sql $OPTIONS{edir}/tables/basenodes.in | mysql ".buildSqlCmdline." $database";
	system $cmdline;
}

sub addApacheconf {
	my $conffile = $OPTIONS{edir}."/everything.apache.conf";

	if (not -e $conffile) {
		print "no file $conffile exists!  Skipping httpd.conf manipulation...\n";
		return;
	}
	open CONFFILE, $conffile or die "I can't read $conffile";
	my @filelines = <CONFFILE>; 
	close CONFFILE;

	if (grep /^<Directory $OPTIONS{webdir}>$/, @filelines) {
		print "it looks like your apache conf file already has this directory!\n";
		return;
	}

	my $dirfile = $OPTIONS{edir}."/web/httpd.dir";
	open DIRFILE, $dirfile;
	my @dirlines = <DIRFILE>;
	close DIRFILE;

	foreach (@dirlines) {
		s/#WEB_DIR#/$OPTIONS{webdir}/;
	}

	if (not -w $conffile) {
		print "I can't write to your $conffile file!\n\n";
		return unless confirmYN("Would you like me to print what I would have added to it?"); 
		print @dirlines;
		return;
	} else {
		open CONFFILE, ">> $conffile";	
		print CONFFILE @dirlines;
		close CONFFILE;
	}	
	print "$conffile has been modified.  Remember to restart the Apache server.\n\nAlso note, this change will not take effect unless you have:
	Include $conffile

somewhere in your httpd.conf";

}


#############################################################################
#
#	main function
#
sub main {
	#locate everything dir - $OPTIONS{edir}
	getEverythingDir();
	$OPTIONS{edir} = absPath $OPTIONS{edir};

	my $dbh;
	while(not $dbh){
		unless (defined $OPTIONS{rootpass}) {
			ReadMode 'noecho';
			$OPTIONS{rootpass} = RLquick("Please enter the root password for mysql");
			print "\n";
			ReadMode 'normal';
		}

		$dbh = DBI->connect("DBI:mysql:mysql:$OPTIONS{host}", "root", $OPTIONS{rootpass});

		unless($dbh){
			print "\n\nYour password was incorrect. Please try again.\n";
			delete $OPTIONS{rootpass};
		}
	}

	#confirm to clobber DB if exists
	unless ($OPTIONS{nocreatedb}) { 
		die "failed on creation of database $database" 
			unless createDatabase($dbh, $database) 
	}
	
	#setup the SQL user -- @OPTIONS{user, password}
	setupSqlUser($dbh, $database) unless $OPTIONS{nocreateuser};

	$dbh->disconnect();

	#specify/initialize web directory -- $OPTIONS{webdir}
	createWebdir();	
	
	#create index.pl file
	createIndex();

	# copy images into web directory
	local *DIR;
	my $imgdir = File::Spec->catdir( $OPTIONS{edir}, 'images' );
	if (opendir( DIR, $imgdir ))
	{
		while (my $file = readdir( DIR ))
		{
			copy(map {File::Spec->catfile($_, $file)} $imgdir,$OPTIONS{webdir});
		}
	}

	#set up an "incoming" directory
	createIncoming(); 
	 
	#install base nodes
	$OPTIONS{user} = 'root';
	$OPTIONS{password} = $OPTIONS{rootpass};
	installBasenodes() unless $OPTIONS{nocoreinstall};
	
	#initialize DB
	initEverything("$database:root:$OPTIONS{rootpass}:$OPTIONS{host}");

	#install core system
		installNodeball $OPTIONS{edir}."/nodeballs/ecore" unless $OPTIONS{nocoreinstall};

	#confirm/add to httpd.conf
	addApacheconf() unless $OPTIONS{noapacheconf};

	#restart apache
	print "\n\n\nInstallation complete, now restart apache with:\n\n\tapachectl restart\n\n";

}

main;
