=head1 Creating your own themes

Serious Everything users will customize their site look. The best way
to do this is to create your own themes. By following a few simple
rules and planning ahead, you can present the same information in many
different ways.

=head2 Editing a Theme, Basics

The easiest way to start is by modifying an existing theme. We'll start
with the 'default theme'. Clone it, creating 'modified default theme'.
Follow the link to the clone and enter edit mode.

First, change the author, description, and version fields. This will
provide more distinguishing characteristics of your theme.

Most of the settings from the 'default theme' affect colors. If you've
worked with HTML before, you'll recognize them. Otherwise, consult the
following reference chart. Similar settings have been left out:

setting

controls

bodyBgcolor

the background color of the whole page

bodyLinkcolor

the color of hyperlinks

bodyTextcolor

the default color for text

bodyVlinkcolor

the color of visited hyperlinks

nodeletMCTableAttr

HTML attributes for the nodelet main containers

nodeletTitleBackground

the URI path to an image used in nodelet title bars

nodeletTitleFontAttr

HTML attributes used in the E<lt>fontE<gt> tags of nodelet titles

generalParent_container

the node_id of the container used to hold HTML generated by htmlpages

nodeletParent_container

the node_id of the container used to hold HTML generated by nodelets

Color settings are given in hex triplets of the form #RRGGBB, where R
is Red, G is Green, and B is blue. The higher the number, the more of
that color will be added. Attribute settings are name/value pairs
applicable to the named HTML tag. For example, setting C<color="white">
in the nodeletTitleFontAttr will produce a font tag of C<E<lt>font
color="whiteE<gt>>.

One default setting may give you trouble. The nodeletTitleBackground
parameter allows users to choose a background image for the nodelet
title element. The safest blank value seems to be two double or single
quotes. Otherwise, use a valid path to an image.

The final setting type selects containers to use to hold generated
text. (Any setting value consisting of only numeric digits will have an
associated Auto Set Value selector.) Either provide a node_id in the
value field, or delete the contents of the value field, provide the
node title and select the appropriate nodetype in the auto set value
column. Note that the Engine prefers any value from the value field to
the value from the auto set value field. You must clear the value field
to use the auto set value field. If you provide your own containers,
select them here.

=head2 Editing an Theme, Example

The chromatic example theme has the following attributes. Node_ids in
parenthesis will vary on different installations. Note that this theme
provides some additional setting at the end. Explanations follow.

setting

value

author

chromatic

bodyBgcolor

#bbbbFF

bodyLinkcolor

#0000ff

bodyTextcolor

#333333

bodyVlinkcolor

#5555cc

description

chromatic's "example" theme

displaypref_document

chromatic display

generalParent_container

chromatic main container (257)

nodeletBodyColor

#000077

nodeletBodyFontAttr

size-=2 color="#eeeeff"

nodeletMCTableAttr

width=150 cellpadding=1 cellspacing=1

nodeletParent_container

chromatic nodelet container (258)

nodeletTitleBackground

''

nodeletTitleColor

#0000ff

nodeletTitleFontAttr

color=white

sepBarColor

#000077

version

0.15

The sepBarColor field provides the color used for the stripe beneath
the icon and the search bar. The displaypref_document setting tells the
Engine to use a special document display htmlpage for this theme. A
later section examines this in more detail.

=head2 Modifying a Container

Containers must follow two rules. First, they absolutely must evaluate
to HTML containing the text string 'CONTAINED_STUFF'. The Engine will
replace it with data from the contained htmlpage or nodelet. Second,
they need to produce sufficient HTML output to render the page or have
a parent container which does so. The core 'stdcontainer' node fits
most needs.

As with most other display components, cloning an existing container
sets up the node with sane defaults. The 'chromatic main container'
grew out of the 'main container'. Besides moving the site icon to the
left of the search box, it adds a colored horizontal bar to separate
the page header from the content.

The theme determines the color of the bar. When processing settings,
it's a good idea to provide a default value. In case a future theme
uses this container but neglects a particular setting, a color mismatch
is preferable to a potential crash or malformed HTML. This particular
application has very simple code, using the theme's sepBarColor value
or '#000000'. Note that it does not check the validity of the theme
setting -- that is the job of theme editors.

	<td colspan="2" bgcolor="[%
		defined($$THEME{sepBarColor}) ?
 		$$THEME{sepBarColor} : '#000000';
	%]">[{onepix}]</td>

When you've finished your container, be sure to use the 'Node Bucket'
to add it to your theme. This will allow you to export your theme, and
provides a convenient place to edit all of the theme elements.

=head2 Modifying an Htmlpage

The most powerful element of theme functionality is a theme-specific
htmlpage. While normal htmlpages can and should respect theme values,
creating a dedicated htmlpage offers a powerful opportunity to provide
radically different views. Everything2 uses this to display e2nodes.
Users can select a theme which shows all attached writeups, some full
writeups with titles and summaries, or a windowed selection of
writeups.

A htmlpage supporting a theme is very similar to normal htmlpage. Two
fields of the node affect theme behavior. The 'pagetype' field governs
the nodetype the htmlpage processes. The most important field is
'displaytype'. When searching for a htmlpage, the Engine checks the
theme for 'displaypref_' settings. If one is found for the current
nodetype, the Engine searches for an htmlpage providing that value as a
displaytype.

For example, the 'chromatic theme' specifies that document nodes should
use the 'chromatic document display page'. The displaypref_document
setting in the theme node tells the Engine to search for an htmlpage
with the displaytype of 'chromatic display' when processing a document
node. This value must be exactly the same in the theme settings and the
properties of the htmlpage!

The 'parent container' field performs another important role related to
the theme. The 'general container' (default value for this setting in
core htmlpages) has special logic to select the appropriate parent
container set in the theme. If the theme does not indicate a parent
container, the Engine uses the parent container from 'system settings'.
Unless you have a very different displaytype (the 'node xml page', for
example), you should always use the 'general container'.

To create a new htmlpage, simply clone an existing page supporting the
appropriate nodetype and displaytype. Be sure to add it to the theme
node.

=head2 Exporting your Theme

Collect all of the nodes necessary for your theme. Add them to the
theme node as you would to any other node group. Because theme nodes
descend from nodeball nodes, you can export your theme and distribute
it as you would a nodeball.
