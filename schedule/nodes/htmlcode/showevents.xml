<NODE export_version="0.5" nodetype="htmlcode" title="showevents">
  <field name="author_user" type="noderef" type_nodetype="user,nodetype">root</field>
  <field name="authoraccess" type="literal_value">iiii</field>
  <field name="code" type="literal_value">my ($date, $minres, $foruser) = @_;
$foruser = int $foruser;
$foruser ||= getId($USER);

my $restrict;
$restrict .= "author_user=$foruser ";
$restrict .= " and private=0" unless $foruser == getId($USER);
my $qdate = $DB->getDatabaseHandle()->quote($date);
my $preevents = getNodeWhere("$restrict and UNIX_TIMESTAMP(starttime)-UNIX_TIMESTAMP($qdate) &lt; 0 and UNIX_TIMESTAMP(endtime)-UNIX_TIMESTAMP($qdate)>0","event");
my $events = getNodeWhere("$restrict and UNIX_TIMESTAMP(starttime)-UNIX_TIMESTAMP($qdate) &lt; 60*60*24 and UNIX_TIMESTAMP(starttime)-UNIX_TIMESTAMP($qdate) > 0", "event");

my $str;
my @cols = ();
my %epochseconds;
my $CALSETTINGS = getNode('calendar settings','setting');
my $CS = $CALSETTINGS->getVars;
my @colors;
@colors = split ",", $$CS{eventcolors} if exists $$CS{eventcolors};
@colors = ("#FFFFFF") unless @colors;


my ($starthour, $endhour);
$starthour = $$CS{starthour} if exists $$CS{starthour};
$endhour = $$CS{endhour} if exists $$CS{endhour};


$starthour ||=7;
$endhour ||= 19;



local *toEpoch = sub {
  my ($d) = @_;
  return $epochseconds{$d} if exists $epochseconds{$d};
  my $qd = $DB->getDatabaseHandle()->quote($d);
  my $epoch = $DB->sqlSelect("UNIX_TIMESTAMP($qd)");
  $epochseconds{$d} = $epoch;
  $epoch;
  #I should maybe be using Date::Manip instead of the DB, but I know MySQL
  #will do it right
};

local *eventOverlap = sub {
  my ($E1, $E2) = @_; 

  if (toEpoch($$E1{starttime}) > toEpoch($$E2{starttime})) {
     ($E1, $E2) = ($E2, $E1);
  }  #E1 is always the one that starts first

  if (toEpoch($$E2{starttime}) &lt;= toEpoch($$E1{endtime})) {
    return 1;
  } else {
    return 0;
  }
};

#return true if these events don't overlap
local *fitsInCol = sub {
  my ($E, $eventlist) = @_;

  foreach (@$eventlist) {
    return 0 if eventOverlap($E, $_);
  }
  1;
};



#each event carrying over from the day before needs its own column
foreach (@$preevents) {
  push @cols, [$_];
}

#build columns -- as few as possible, but the events can't overlap within them

foreach (@$events) {
  my $foundaspot = 0;
  foreach my $colevents (@cols) {
    if (not $foundaspot and fitsInCol($_, $colevents)) {
      push @$colevents, $_;
      $foundaspot = 1;
    }
  } 
  push @cols, [$_] unless $foundaspot;
}

my $count=0;

foreach my $colevents (@cols) {
  $colevents = [ sort { toEpoch($$a{starttime}) &lt;=> toEpoch($$b{starttime}) } @$colevents ];
  #columns can be sorted by starttime
}

$starthour = toEpoch($date) + $starthour*60*60;
$endhour = toEpoch($date) + $endhour*60*60;
#convert to epoch

my @rowspans;
my $now = $starthour;
my $maxrowspan = int(($endhour - $starthour)/(60*$minres))+1;

local *calcRowspan = sub {
  my ($n, $EV, $max) = @_;
  my $elength = toEpoch ($$EV{endtime}) - $n;
  $elength = $elength / 60; #convert to min
  my $numrows = sprintf("%i", ($elength / $minres)); #convert to rows
  $numrows++ if $elength % $minres; #take the ceiling
  $numrows = $max if $numrows > $max;
  $numrows = 1 if $numrows &lt; 1;
  $numrows;
};

my $clrindex=0;
$str.="&lt;table width=100% border=1 cellpadding=1 cellspacing=0>";
while ($now &lt;= $endhour) {
  $str.="&lt;tr>&lt;td>";
  my ($s, $m, $h, $md, $mm, $y) = localtime($now);
  my $endh = $h+1;
  $m = sprintf("%02d", $m);
  $str.="&lt;a href=".urlGen({node => "appointment at $date $h:$m", 
    op => 'new', 
    type => 'event',
    event_starttime => "$date $h\:$m\:00",
    event_endtime => "$date $endh\:$m\:00"
}).">$h:$m&lt;/a>";

  $str.="&lt;/td>";

  my $column = 0;
  foreach my $colevents (@cols) {
    $column++;
    if ($rowspans[$column] and $rowspans[$column] > 0) {
      next if --$rowspans[$column];
      #$str.="&lt;td>$column: $rowspans[$column]&lt;/td>";
    }
    if (not @$colevents) {
      #nothing more in this column.  Pad.
      $str.= "&lt;td>&lt;/td>";
      next;
    }

    my $E = $$colevents[0];
    if ($now - toEpoch($$E{starttime}) >= 0) {
      #start the event, and set it's length in rows
      shift @$colevents;
      my $numrows = calcRowspan($now, $E, $maxrowspan);
      $rowspans[$column] = $numrows;
      
      my ($sdate, $stime) = split ' ', $$E{starttime};
      my ($edate, $etime) = split ' ', $$E{endtime};

      my $special = "";
      $special .= " (private) " if $$E{private};
      if ($now - toEpoch($$E{starttime}) > 0 and $now - toEpoch($$E{starttime}) > $minres*60) {
        $special .= "($sdate)" if $date ne $sdate;
      }      
      
      $stime =~ s/\:\d{2}$//;
      $etime =~ s/\:\d{2}$//;
      $str.="&lt;td valign=top rowspan=$numrows bgcolor=$colors[++$clrindex%@colors]>". $special;
      $str.= linkNode($E, "$stime\-$etime");
      $str.= " ".$$E{title}."&lt;/td>";
    }else {
      #no event now.  Pad
      $str.="&lt;td>&lt;/td>";
    }
    
  }
  $now+= $minres*60;
  $maxrowspan--;
}
$str.="&lt;/table>";



$str;</field>
  <field name="dynamicauthor_permission" type="literal_value">-1</field>
  <field name="dynamicgroup_permission" type="literal_value">-1</field>
  <field name="dynamicguest_permission" type="literal_value">-1</field>
  <field name="dynamicother_permission" type="literal_value">-1</field>
  <field name="group_usergroup" type="literal_value">-1</field>
  <field name="groupaccess" type="literal_value">iiiii</field>
  <field name="guestaccess" type="literal_value">iiiii</field>
  <field name="loc_location" type="literal_value">0</field>
  <field name="otheraccess" type="literal_value">iiiii</field>
  <field name="title" type="literal_value">showevents</field>
  <field name="type_nodetype" type="noderef" type_nodetype="nodetype,nodetype">htmlcode</field>
</NODE>
