<NODE export_version="0.5" nodetype="htmlpage" title="nodetype display page">
  <field name="MIMEtype" type="literal_value">text/html</field>
  <field name="author_user" type="noderef" type_nodetype="user,nodetype">root</field>
  <field name="authoraccess" type="literal_value">iiii</field>
  <field name="displaytype" type="literal_value">display</field>
  <field name="dynamicauthor_permission" type="literal_value">-1</field>
  <field name="dynamicgroup_permission" type="literal_value">-1</field>
  <field name="dynamicguest_permission" type="literal_value">-1</field>
  <field name="dynamicother_permission" type="literal_value">-1</field>
  <field name="group_usergroup" type="literal_value">-1</field>
  <field name="groupaccess" type="literal_value">iiii-</field>
  <field name="guestaccess" type="literal_value">iiii-</field>
  <field name="loc_location" type="noderef" type_nodetype="location,nodetype">htmlpage</field>
  <field name="otheraccess" type="literal_value">iiii-</field>
  <field name="ownedby_theme" type="noderef" type_nodetype="theme,nodetype">default theme</field>
  <field name="page" type="literal_value">&lt;p>&lt;b>Default permissions for nodes of this type:&lt;/b>&lt;br>
&lt;table cellspacing=1 cellpadding=3>
 &lt;tr>
  &lt;td bgcolor=#cccccc>&lt;b>Class&lt;/b>&lt;/td>
  &lt;td bgcolor=#cccccc>&lt;b>Permissions&lt;/b>&lt;/td>
  &lt;td bgcolor=#cccccc>&lt;b>Inherited values&lt;/b>&lt;/td>
 &lt;/tr>
 &lt;tr>
  &lt;td bgcolor=#cccccc>Author:&lt;/td>
  &lt;td bgcolor=#999999>&lt;code>["$$NODE{defaultauthoraccess}"]&lt;/code>&lt;/td>
  &lt;td bgcolor=#999999>&lt;code>[%
my $TYPE = getType($$NODE{extends_nodetype});
return $$TYPE{derived_defaultauthoraccess} if($TYPE);
"";
%]&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
  &lt;td bgcolor=#cccccc>Group: [%
my $str;
if($$NODE{defaultgroup_usergroup} > 0)
{ 
  $str = linkNode($$NODE{defaultgroup_usergroup});
}
else
{
  $str = "No group";
}

$str;
%]&lt;/td>
  &lt;td bgcolor=#999999>&lt;code>["$$NODE{defaultgroupaccess}"]&lt;/code>&lt;/td>
  &lt;td bgcolor=#999999>&lt;code>[%
my $TYPE = getType($$NODE{extends_nodetype});
return $$TYPE{derived_defaultgroupaccess} if($TYPE);
"";
%]&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
  &lt;td bgcolor=#cccccc>Other:&lt;/td>
  &lt;td bgcolor=#999999>&lt;code>["$$NODE{defaultotheraccess}"]&lt;/code>&lt;/td>
  &lt;td bgcolor=#999999>&lt;code>[%
my $TYPE = getType($$NODE{extends_nodetype});
return $$TYPE{derived_defaultotheraccess} if($TYPE);
"";
%]&lt;/code>&lt;/td>
 &lt;/tr>
 &lt;tr>
  &lt;td bgcolor=#cccccc>Guest:&lt;/td>
  &lt;td bgcolor=#999999>&lt;code>["$$NODE{defaultguestaccess}"]&lt;/code>&lt;/td>
  &lt;td bgcolor=#999999>&lt;code>[%
my $TYPE = getType($$NODE{extends_nodetype});
return $$TYPE{defaultguestaccess} if($TYPE);
"";
%]&lt;/code>&lt;/td>
 &lt;/tr>
&lt;/table>

[%
if($NODE->isGroup())
{ 
  return "&lt;p>&lt;b>Restricted Nodetypes&lt;/b>: ";
}
%]

&lt;p>&lt;b>Restrict Duplicates&lt;/b> (identical titles): 
	[% if($$NODE{restrictdupes} == -1) { "parent"; }
	   else{ $$NODE{restrictdupes}?"Yes":"No";} %]

&lt;p> &lt;b>Sql Tables&lt;/b>: 


[%
my $tables = $DB->getNodetypeTables($NODE);
my $str;
foreach (@$tables) {
   my $TABLE = getNode($_, 'dbtable');
   $str.="&lt;li>".linkNode($TABLE);
}
return  "&lt;i>none&lt;/i>" unless @$tables;
$str;
%] 
&lt;p> &lt;b>Extends Nodetype:&lt;/b> 
[% linkNode ($$NODE{extends_nodetype}) 
	if ($$NODE{extends_nodetype});%]


&lt;p> &lt;b>Maximum Revisions for undo:&lt;/b> 
[%
  if ($$NODE{maxrevisions}) {
    if ($$NODE{maxrevisions} == -1) {
      return "$$NODE{derived_maxrevisions} (inherited)";
    } else {
      return $$NODE{maxrevisions};
    }

  } else {
   return "&lt;i>undo disabled&lt;/i>";
  }

%]
&lt;p>  &lt;b>Can be changed in a workspace:&lt;/b>
[%
  if ($$NODE{canworkspace}) {
    if ($$NODE{canworkspace} == -1) {
       return ($$NODE{derived_canworkspace}?"enabled":"disabled")." (inherited)";
    } else {
       return "enabled";
    }
  } else {
    return "&lt;i>disabled&lt;/i>";
  }
%]
&lt;p> &lt;b>Relevant pages:&lt;/b>&lt;br>

[%
my $str;
my $pages = getNodeWhere(
  { pagetype_nodetype => $$NODE{node_id} }, getType('htmlpage'));

return "None" unless($pages);

foreach (@$pages)
{
  $str .= "&lt;li>" .linkNode ($_);
}
$str;
%]

[%
my $GCL = getNode('code browser', 'restricted_superdoc');
return unless $GCL;

local *getModuleFunctions = sub {
    my ($modname) = @_;

    no strict;
    local *stash;
    *stash = *{ "${modname}::" };
    unless (keys %stash) {
        #we haven't loaded the module.  Make it so.
        eval "use $modname";
        *stash = *{ "${modname}::" };
    }
    my @modfuncs;

    require Devel::Peek;
    Devel::Peek->import("CvGV");
    foreach(keys %stash) {
        my $glob = CvGV(\&amp;{$stash{$_}});

        push (@modfuncs, $_)
            if (defined &amp;{ $stash{$_} }
                    and $glob eq "\*$modname\:\:$_");
    }
    use strict;
    return @modfuncs;
};


my %nodemethods = ();
local *listNodetypeSubs = sub {
  my ($NT) = @_;
  my $ret;

  my $dbmethods = getNodeWhere({supports_nodetype => $NT->getId}, "nodemethod");
  foreach (@$dbmethods) {
    $ret.="&lt;li>".linkNode($_) unless exists $nodemethods{$$_{title}};
    $nodemethods{$$_{title}} = 1;
  }


  my $module = "Everything\:\:Node\:\:$$NT{title}";
  my @functions;
  @functions = sort {$a cmp $b} getModuleFunctions($module) if exists $DB->{nodetypeModules}->{$module};
  foreach (@functions) {
    $ret.="&lt;li>".linkNode($GCL, $_, { choicefunc => "$module\:\:$_" }) unless exists $nodemethods{$_};  
    $nodemethods{$_} = 1;
  }
  
  return $ret;
};
my $str = "&lt;p>
&lt;b>Relevant Nodemethods&lt;/b>:
&lt;p>";
my $NT = $NODE;

while ($NT) {
  $str.="&lt;p>Nodemethods provided by ".linkNode($NT).":";
  my $methods = listNodetypeSubs($NT);
  $methods ||= " &lt;i>none&lt;/i>";
  $str.=$methods;
  last if $$NT{title} eq 'node';
  $NT = getNode($$NT{extends_nodetype});
} 
$str;
%]</field>
  <field name="pagetype_nodetype" type="noderef" type_nodetype="nodetype,nodetype">nodetype</field>
  <field name="parent_container" type="noderef" type_nodetype="container,nodetype">general container</field>
  <field name="permissionneeded" type="literal_value">r</field>
  <field name="title" type="literal_value">nodetype display page</field>
  <field name="type_nodetype" type="noderef" type_nodetype="nodetype,nodetype">htmlpage</field>
</NODE>
