<NODE export_version="0.5" nodetype="htmlpage" title="nodetype display page">
  <field name="MIMEtype" type="literal_value">text/html</field>
  <field name="author_user" type="noderef" type_nodetype="user,nodetype">root</field>
  <field name="authoraccess" type="literal_value">iiii</field>
  <field name="displaytype" type="literal_value">display</field>
  <field name="dynamicauthor_permission" type="literal_value">-1</field>
  <field name="dynamicgroup_permission" type="literal_value">-1</field>
  <field name="dynamicguest_permission" type="literal_value">-1</field>
  <field name="dynamicother_permission" type="literal_value">-1</field>
  <field name="group_usergroup" type="literal_value">-1</field>
  <field name="groupaccess" type="literal_value">iiii-</field>
  <field name="guestaccess" type="literal_value">iiii-</field>
  <field name="loc_location" type="noderef" type_nodetype="location,nodetype">htmlpage</field>
  <field name="otheraccess" type="literal_value">iiii-</field>
  <field name="ownedby_theme" type="literal_value">0</field>
  <field name="page" type="literal_value">&lt;p&gt;&lt;b&gt;Default permissions for nodes of this type:&lt;/b&gt;&lt;br&gt;
&lt;table cellspacing=1 cellpadding=3&gt;
 &lt;tr&gt;
  &lt;td bgcolor=#cccccc&gt;&lt;b&gt;Class&lt;/b&gt;&lt;/td&gt;
  &lt;td bgcolor=#cccccc&gt;&lt;b&gt;Permissions&lt;/b&gt;&lt;/td&gt;
  &lt;td bgcolor=#cccccc&gt;&lt;b&gt;Inherited values&lt;/b&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;td bgcolor=#cccccc&gt;Author:&lt;/td&gt;
  &lt;td bgcolor=#999999&gt;&lt;code&gt;[&quot;$$NODE{defaultauthoraccess}&quot;]&lt;/code&gt;&lt;/td&gt;
  &lt;td bgcolor=#999999&gt;&lt;code&gt;[%
my $TYPE = getType($$NODE{extends_nodetype});
return $$TYPE{derived_defaultauthoraccess} if($TYPE);
&quot;&quot;;
%]&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;td bgcolor=#cccccc&gt;Group: [%
my $str;
if($$NODE{defaultgroup_usergroup} &gt; 0)
{ 
  $str = linkNode($$NODE{defaultgroup_usergroup});
}
else
{
  $str = &quot;No group&quot;;
}

$str;
%]&lt;/td&gt;
  &lt;td bgcolor=#999999&gt;&lt;code&gt;[&quot;$$NODE{defaultgroupaccess}&quot;]&lt;/code&gt;&lt;/td&gt;
  &lt;td bgcolor=#999999&gt;&lt;code&gt;[%
my $TYPE = getType($$NODE{extends_nodetype});
return $$TYPE{derived_defaultgroupaccess} if($TYPE);
&quot;&quot;;
%]&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;td bgcolor=#cccccc&gt;Other:&lt;/td&gt;
  &lt;td bgcolor=#999999&gt;&lt;code&gt;[&quot;$$NODE{defaultotheraccess}&quot;]&lt;/code&gt;&lt;/td&gt;
  &lt;td bgcolor=#999999&gt;&lt;code&gt;[%
my $TYPE = getType($$NODE{extends_nodetype});
return $$TYPE{derived_defaultotheraccess} if($TYPE);
&quot;&quot;;
%]&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
  &lt;td bgcolor=#cccccc&gt;Guest:&lt;/td&gt;
  &lt;td bgcolor=#999999&gt;&lt;code&gt;[&quot;$$NODE{defaultguestaccess}&quot;]&lt;/code&gt;&lt;/td&gt;
  &lt;td bgcolor=#999999&gt;&lt;code&gt;[%
my $TYPE = getType($$NODE{extends_nodetype});
return $$TYPE{defaultguestaccess} if($TYPE);
&quot;&quot;;
%]&lt;/code&gt;&lt;/td&gt;
 &lt;/tr&gt;
&lt;/table&gt;

[%
if($NODE-&gt;isGroup())
{ 
  return &quot;&lt;p&gt;&lt;b&gt;Restricted Nodetypes&lt;/b&gt;: &quot;;
}
%]

&lt;p&gt;&lt;b&gt;Restrict Duplicates&lt;/b&gt; (identical titles): 
	[% if($$NODE{restrictdupes} == -1) { &quot;parent&quot;; }
	   else{ $$NODE{restrictdupes}?&quot;Yes&quot;:&quot;No&quot;;} %]

&lt;p&gt; &lt;b&gt;Sql Tables&lt;/b&gt;: 


[%
my $tables = $DB-&gt;getNodetypeTables($NODE);
my $str;
foreach (@$tables) {
   my $TABLE = getNode($_, 'dbtable');
   $str.=&quot;&lt;li&gt;&quot;.linkNode($TABLE);
}
return  &quot;&lt;i&gt;none&lt;/i&gt;&quot; unless @$tables;
$str;
%] 
&lt;p&gt; &lt;b&gt;Extends Nodetype:&lt;/b&gt; 
[% linkNode ($$NODE{extends_nodetype}) 
	if ($$NODE{extends_nodetype});%]


&lt;p&gt; &lt;b&gt;Maximum Revisions for undo:&lt;/b&gt; 
[%
  if ($$NODE{maxrevisions}) {
    if ($$NODE{maxrevisions} == -1) {
      return &quot;$$NODE{derived_maxrevisions} (inherited)&quot;;
    } else {
      return $$NODE{maxrevisions};
    }

  } else {
   return &quot;&lt;i&gt;undo disabled&lt;/i&gt;&quot;;
  }

%]
&lt;p&gt;  &lt;b&gt;Can be changed in a workspace:&lt;/b&gt;
[%
  if ($$NODE{canworkspace}) {
    if ($$NODE{canworkspace} == -1) {
       return ($$NODE{derived_canworkspace}?&quot;enabled&quot;:&quot;disabled&quot;).&quot; (inherited)&quot;;
    } else {
       return &quot;enabled&quot;;
    }
  } else {
    return &quot;&lt;i&gt;disabled&lt;/i&gt;&quot;;
  }
%]
&lt;p&gt; &lt;b&gt;Relevant pages:&lt;/b&gt;&lt;br&gt;

[%
my $str;
my $pages = getNodeWhere(
  { pagetype_nodetype =&gt; $$NODE{node_id} }, getType('htmlpage'));

return &quot;None&quot; unless($pages);

foreach (@$pages)
{
  $str .= &quot;&lt;li&gt;&quot; .linkNode ($_);
}
$str;
%]

[%
my $GCL = getNode('code browser', 'restricted_superdoc');
return unless $GCL;

local *getModuleFunctions = sub {
    my ($modname) = @_;

    no strict;
    local *stash;
    *stash = *{ &quot;${modname}::&quot; };
    unless (keys %stash) {
        #we haven't loaded the module.  Make it so.
        eval &quot;use $modname&quot;;
        *stash = *{ &quot;${modname}::&quot; };
    }
    my @modfuncs;

    require Devel::Peek;
    Devel::Peek-&gt;import(&quot;CvGV&quot;);
    foreach(keys %stash) {
        my $glob = CvGV(\&amp;{$stash{$_}});

        push (@modfuncs, $_)
            if (defined &amp;{ $stash{$_} }
                    and $glob eq &quot;\*$modname\:\:$_&quot;);
    }
    use strict;
    return @modfuncs;
};


my %nodemethods = ();
local *listNodetypeSubs = sub {
  my ($NT) = @_;
  my $ret;

  my $dbmethods = getNodeWhere({supports_nodetype =&gt; $NT-&gt;getId}, &quot;nodemethod&quot;);
  foreach (@$dbmethods) {
    $ret.=&quot;&lt;li&gt;&quot;.linkNode($_) unless exists $nodemethods{$$_{title}};
    $nodemethods{$$_{title}} = 1;
  }


  my $module = &quot;Everything\:\:Node\:\:$$NT{title}&quot;;
  my @functions;
  @functions = sort {$a cmp $b} getModuleFunctions($module) if exists $DB-&gt;{nodetypeModules}-&gt;{$module};
  foreach (@functions) {
    $ret.=&quot;&lt;li&gt;&quot;.linkNode($GCL, $_, { choicefunc =&gt; &quot;$module\:\:$_&quot; }) unless exists $nodemethods{$_};  
    $nodemethods{$_} = 1;
  }
  
  return $ret;
};
my $str = &quot;&lt;p&gt;
&lt;b&gt;Relevant Nodemethods&lt;/b&gt;:
&lt;p&gt;&quot;;
my $NT = $NODE;

while ($NT) {
  $str.=&quot;&lt;p&gt;Nodemethods provided by &quot;.linkNode($NT).&quot;:&quot;;
  my $methods = listNodetypeSubs($NT);
  $methods ||= &quot; &lt;i&gt;none&lt;/i&gt;&quot;;
  $str.=$methods;
  last if $$NT{title} eq 'node';
  $NT = getNode($$NT{extends_nodetype});
} 
$str;
%]</field>
  <field name="pagetype_nodetype" type="noderef" type_nodetype="nodetype,nodetype">nodetype</field>
  <field name="parent_container" type="noderef" type_nodetype="container,nodetype">general container</field>
  <field name="permissionneeded" type="literal_value">r</field>
  <field name="title" type="literal_value">nodetype display page</field>
  <field name="type_nodetype" type="noderef" type_nodetype="nodetype,nodetype">htmlpage</field>
</NODE>

