<NODE export_version="0.5" nodetype="opcode" title="bucketOp">
  <field name="author_user" type="noderef" type_nodetype="user,nodetype">root</field>
  <field name="authoraccess" type="literal_value">iiii</field>
  <field name="code" type="literal_value">my $r = shift;
my $query = $r-&gt;get_cgi;
my $USER = $r-&gt;get_user;
my $VARS = $r-&gt;get_user_vars;

if($query-&gt;param(&quot;bmove&quot;))
{
  my $loc = $r-&gt;get_nodebase-&gt;getNode($query-&gt;param(&quot;node_id&quot;));

  return unless($loc &amp;&amp; $loc-&gt;isOfType(&quot;location&quot;) &amp;&amp;
    $loc-&gt;hasAccess($USER, &quot;x&quot;));

  foreach my $param ($query-&gt;param)
  {
    next unless($param =~ /^bnode_(.*)$/);

    my $id = $1;
    my $node = getNode($id);
   
    next unless($node);

    $$node{loc_location} = $$loc{node_id};
    $node-&gt;update($USER);
  }
}
elsif($query-&gt;param(&quot;bsymlink&quot;))
{
  my $loc = getNode($query-&gt;param(&quot;node_id&quot;));
  my $sym = getType(&quot;symlink&quot;);
  return unless($loc &amp;&amp; $loc-&gt;isOfType(&quot;location&quot;) &amp;&amp;
    $loc-&gt;hasAccess($USER, &quot;x&quot;) &amp;&amp; $sym-&gt;hasTypeAccess($USER, &quot;c&quot;));

  foreach my $param ($query-&gt;param)
  {
    next unless($param =~ /^bnode_(.*)$/);

    my $id = $1;
    my $node = getNode($id);
   
    next unless($node);

    my $symlink = getNode($$node{title}, &quot;symlink&quot;, &quot;create force&quot;);

    $$symlink{symlink_node} = $$node{node_id};
    $$symlink{loc_location} = $$loc{node_id};

    $symlink-&gt;insert($USER);
  }
}
elsif($query-&gt;param(&quot;bgroupadd&quot;))
{
  my $group = getNode($query-&gt;param(&quot;node_id&quot;));

  return unless($group &amp;&amp; $group-&gt;isGroup() &amp;&amp; $group-&gt;hasAccess($USER, &quot;w&quot;));

  foreach my $param ($query-&gt;param)
  {
    next unless($param =~ /^bnode_(.*)$/);

    # For some reason, passing $1 here causes the function to receive undef.
    # Probably has something to do with default vars.  So, we need to assign
    # what we found to a scoped var.
    my $insert = $1;
    $group-&gt;insertIntoGroup($USER, $insert);
	$group-&gt;update($USER);
  }
}
elsif($query-&gt;param('bflush'))
{
  my $vars = $USER-&gt;getVars();
  delete $$vars{nodebucket};  # flush the nodebucket
  $USER-&gt;setVars($vars);
  # Don't need to update as $USER automatically gets updated on pageload end
}


if($query-&gt;param(&quot;bdrop&quot;) or $query-&gt;param(&quot;dropexec&quot;))
{
  my $bucket = $$VARS{nodebucket};
  foreach my $param ($query-&gt;param)
  {
    next unless($param =~ /^bnode_(.*)$/);

    # Remove the numeric id from the bucket list
    $bucket =~ s/$1,?//;
    $bucket =~ s/,$//;
  }

  $$VARS{nodebucket} = $bucket;
  delete $$VARS{nodebucket} unless($bucket &amp;&amp; $bucket ne &quot;&quot;);
}</field>
  <field name="groupaccess" type="literal_value">iiii-</field>
  <field name="guestaccess" type="literal_value">iiii-</field>
  <field name="loc_location" type="noderef" type_nodetype="location,nodetype">opcode</field>
  <field name="otheraccess" type="literal_value">iiii-</field>
  <field name="title" type="literal_value">bucketOp</field>
  <field name="type_nodetype" type="noderef" type_nodetype="nodetype,nodetype">opcode</field>
</NODE>
