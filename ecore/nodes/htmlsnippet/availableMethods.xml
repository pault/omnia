<NODE export_version="0.5" nodetype="htmlsnippet" title="availableMethods">
  <field name="author_user" type="noderef" type_nodetype="user,nodetype">root</field>
  <field name="authoraccess" type="literal_value">iiii</field>
  <field name="code" type="literal_value">&lt;h3&gt;Available methods:&lt;/h3&gt;
[%
my $NODE = $this-&gt;get_node;
my $USER = $this-&gt;get_user;
my $query = $this-&gt;get_query;
my $THEME = $this-&gt;get_theme;
my %HTMLVARS = %{ $this-&gt;get_htmlvars };
my $VARS = $this-&gt;get_vars;
my $DB = $this-&gt;get_nodebase;
my %GLOBAL;


  return &quot;&quot; unless $NODE-&gt;{type}{title} eq &quot;nodetype&quot;;

  my $getSymbolsForType = 
  sub {
    my $tier = shift;
    my $symtable;
    my $mod;

    eval(&quot;\$mod = \\\%$tier\:\:&quot;); 
    foreach my $sym (keys %$mod){
     next unless $sym =~ /^[^\*]/;

     if($tier-&gt;can(&quot;$sym&quot;))
     {
       $symtable-&gt;{$sym} ||= [];
       $symtable-&gt;{$sym} = &quot;hardmethod&quot;;
     } #end if

    }

    return $symtable if $tier eq &quot;Everything\:\:Node&quot;;
    if($tier =~ /\:([^\:]*)$/){
      my $csr = $DB-&gt;sqlSelectMany(&quot;nodemethod_id&quot;,
      &quot;nodemethod&quot;,&quot;supports_nodetype=&quot;.$DB-&gt;getId($DB-&gt;getType($1)));
      return unless $csr;

      while(my $nm = $csr-&gt;fetchrow_hashref)
      {
           $nm = $DB-&gt;getNodeById($nm-&gt;{nodemethod_id});
           my $title = $nm-&gt;{title}; 
           $symtable-&gt;{$title} = (($symtable-&gt;{$title})?(&quot;overriddenmethod&quot;):(&quot;softmethod&quot;)).&quot;\:$$nm{node_id}&quot;;
      }#end while
     }#end if
    return $symtable;

  };

  my @typepile;
  my $currtype = $NODE;
  while($currtype)
  {
       unshift @typepile, $currtype-&gt;{title};
       $currtype = $currtype-&gt;getParentType();
  }

  my $pkg = &quot;Everything::Node&quot;;
  my @symbols = ();

  foreach(@typepile)
  { push @symbols, &quot;$pkg\:\:$_&quot;}
  
  my $table;

  foreach my $symtier (@symbols)
  {
      $table-&gt;{$symtier} = &amp;$getSymbolsForType($symtier);
  }

  my $entable = &amp;$getSymbolsForType(&quot;Everything::Node&quot;);

  my $str = &quot;&lt;table&gt;&lt;tr&gt;&lt;td valign=\&quot;top\&quot;&gt;\n&lt;table style=\&quot;background-color: #CCCCCC\&quot;&gt;&lt;tr&gt;&lt;td align=\&quot;center\&quot;&gt;&lt;strong&gt;Everything\:\:Node&lt;/strong&gt;&lt;/td&gt;&lt;/tr&gt;\n&quot;;
  foreach( sort {lc($a) cmp lc($b)} keys %$entable)
  {
    $str.=&quot;&lt;tr&gt;&lt;td&gt;&lt;small&gt;&lt;small&gt;$_&lt;/small&gt;&lt;/small&gt;&lt;/td&gt;&lt;/tr&gt;\n&quot;;
  }
  $str.=&quot;&lt;/table&gt;&lt;/td&gt;\n&quot;;

  my $masterlist = {};

  foreach my $key (keys %$table)
  {
     foreach( keys %{$table-&gt;{$key}})
     {
        $masterlist-&gt;{$_} = 1;
     }
  }

    $str.=&quot;&lt;td valign=\&quot;top\&quot;&gt;&lt;table&gt;&quot;;

  $str.=&quot;&lt;tr&gt;&quot;;
  foreach(@symbols)
  {
    next if(keys %{$table-&gt;{$_}} == 0);
    $str.=&quot;&lt;td&gt;&lt;strong&gt;$_&lt;/strong&gt;&lt;/td&gt;\n&quot;;
  }

  $str.=&quot;&lt;/tr&gt;&quot;;

  foreach my $key (sort { lc($a) cmp lc ($b)} keys %$masterlist)
  { 
     $str.=&quot;&lt;tr&gt;\n&quot;;
     foreach(@symbols)
     {
        next if(keys %{$table-&gt;{$_}} == 0);
        my $display=&quot;&quot;;
        if($table-&gt;{$_}-&gt;{$key}){
           if($table-&gt;{$_}-&gt;{$key} =~ /\:(.*)/)
           {
              $display = $this-&gt;link_node($DB-&gt;getNodeById($1));
           }else
           {
              #if Gigantic Code Lister ever comes back or we create an evil
              #twin of it, we'd link to the module right here
              $display = $key;
           }
        }


        $str.=&quot;&lt;td&gt;&lt;small&gt;&lt;small&gt;$display&lt;/small&gt;&lt;/small&gt;&lt;/td&gt;&quot;;      
     }
     $str.=&quot;&lt;/tr&gt;\n&quot;;
  }
  $str.=&quot;&lt;/table&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&quot;;
  return $str;

%]</field>
  <field name="dynamicauthor_permission" type="literal_value">-1</field>
  <field name="dynamicgroup_permission" type="literal_value">-1</field>
  <field name="dynamicguest_permission" type="literal_value">-1</field>
  <field name="dynamicother_permission" type="literal_value">-1</field>
  <field name="group_usergroup" type="literal_value">-1</field>
  <field name="groupaccess" type="literal_value">iiiii</field>
  <field name="guestaccess" type="literal_value">iiiii</field>
  <field name="loc_location" type="noderef" type_nodetype="location,nodetype">htmlsnippet</field>
  <field name="otheraccess" type="literal_value">iiiii</field>
  <field name="title" type="literal_value">availableMethods</field>
  <field name="type_nodetype" type="noderef" type_nodetype="nodetype,nodetype">htmlsnippet</field>
</NODE>
