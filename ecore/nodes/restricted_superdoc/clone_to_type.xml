<NODE export_version="0.5" nodetype="restricted_superdoc" title="clone to type">
  <field name="author_user" type="noderef" type_nodetype="user,nodetype">root</field>
  <field name="authoraccess" type="literal_value">iiii</field>
  <field name="doctext" type="literal_value">[%
my $NODE = $this-&gt;get_node;
my $USER = $this-&gt;get_user;
my $query = $this-&gt;get_query;
my $THEME = $this-&gt;get_theme;
my %HTMLVARS = %{ $this-&gt;get_htmlvars };
my $VARS = $this-&gt;get_vars;
my $DB = $this-&gt;get_nodebase;
my %GLOBAL;


my $str;
my $src_id = $query-&gt;param(&quot;srcnode_id&quot;);
my $newtype = $query-&gt;param(&quot;newtype&quot;);
my $newname = $query-&gt;param(&quot;newname&quot;);
my $CLONE;
my $SRCNODE = getNode($src_id);
if(defined $newname)
{
  return &quot;No node to clone!&quot; unless($SRCNODE);
  return &quot;No name provided!&quot; unless($newname);

  my $NEWTYPE = getType($newtype);
  if($$NEWTYPE{node_id} != $$SRCNODE{type}{node_id})
   {
    # We want to clone this node as a different type
    my $NEWNODE = getNode($newname, $NEWTYPE, &quot;create force&quot;);
    $str.= &quot;New node of type $$NEWTYPE{title}&quot;;
    # Insert this node into the database.  Doing so will fill out the
    # fields with the default values.
    $NEWNODE-&gt;insert($USER);

    # This gets a hashref of the node that contains only the keys that
    # exist in the database (similar to what you were doing with the
    # getNodetypeTables() and getFields()).
    my $nodeKeys = $NEWNODE-&gt;getNodeKeys();

    foreach my $key (keys %$nodeKeys)
     {
      # Don't overwrite the id and title
      next if($key =~ /_id$/);
      next if($key =~ /^title$/);
      next if($key =~/^type/);

      # This copies over the fields that are common between the two
      # nodetypes.
      $$NEWNODE{$key} = $$SRCNODE{$key} if(exists $$SRCNODE{$key});
     }

    $NEWNODE-&gt;update($USER);

    $CLONE = $NEWNODE;
   }
  else
   {
    # Just make an exact clone of this node
    $CLONE = $SRCNODE-&gt;clone($USER, $newname);
   }

  if($query-&gt;param(&quot;deleteorig&quot;) eq &quot;on&quot; &amp;&amp; $CLONE)
  {
    if($SRCNODE-&gt;nuke($USER))
    {
       $str.=&quot;&lt;br /&gt;Original node ($$SRCNODE{title}) removed.&quot;;
    }
    else
    {
       $str.=&quot;&lt;br /&gt;You do not have permission to remove the original (&quot;.$this-&gt;link_node($SRCNODE).&quot;).&quot;;
    }
  }
  else
  {
    $str.=&quot;&lt;br&gt;Originial node (&quot;.$this-&gt;link_node($SRCNODE).&quot;) preserved.&quot;;
  }

  $CLONE;  # CLONE is the cloned node. 
  return &quot;Cloned node at: &quot;.$this-&gt;link_node($CLONE).&quot;&lt;br /&gt;$str&quot;;
}
else
{
  # Then you have some HTML form stuff...
  $str.=&quot;Cloning node &quot;. $this-&gt;link_node($SRCNODE).&quot; of type: &quot;.$this-&gt;link_node($$SRCNODE{type}).&quot;&lt;br /&gt;&quot;;

     $str.=$query-&gt;start_form(&quot;POST&quot;, $query-&gt;script_name) .
     '&lt;fieldset&gt;'.
      $query-&gt;hidden(&quot;displaytype&quot;) .
      $query-&gt;hidden(&quot;node_id&quot;, $NODE-&gt;get_node_id);

     $str.=&quot;&lt;input type=\&quot;hidden\&quot; name=\&quot;srcnode_id\&quot; value=\&quot;$src_id\&quot; /&gt;&quot;;
     $str.=&quot;&lt;p&gt;To node with:&quot;;
     $str.=&quot;Title: &quot;.$query-&gt;textfield('newname',$$SRCNODE{title},50,240).&quot;&lt;/p&gt;&quot;;


     my @idlist;
     my %items;
     my $id;
     my @allTypes = $DB-&gt;getAllTypes();
     foreach my $N (@allTypes)
      {
       $id = $DB-&gt;getId( $N );
       $items{$id} = $$N{title};
      }

     foreach $id (keys %items)
      {
       push @idlist, $id;
      }

     @idlist=sort{lc($items{$a}) cmp lc($items{$b})} @idlist;
     $str.=&quot;&lt;p&gt;and type of &quot;.$query-&gt;popup_menu(&quot;newtype&quot;, \@idlist, &quot;&quot;, \%items).&quot;&lt;/p&gt;&quot;;
     $str.=$query-&gt;checkbox('deleteorig',&quot;&quot;,&quot;on&quot;,&quot;Delete original node:&quot;);
     $str .=$this-&gt;submit(); 
    $str.='&lt;/fieldset&gt;';
     $str.=$query-&gt;end_form;
} 

%]</field>
  <field name="dynamicauthor_permission" type="literal_value">-1</field>
  <field name="dynamicgroup_permission" type="literal_value">-1</field>
  <field name="dynamicguest_permission" type="literal_value">-1</field>
  <field name="dynamicother_permission" type="literal_value">-1</field>
  <field name="group_usergroup" type="literal_value">-1</field>
  <field name="groupaccess" type="literal_value">iiiii</field>
  <field name="guestaccess" type="literal_value">iiiii</field>
  <field name="loc_location" type="noderef" type_nodetype="location,nodetype">restricted_superdoc</field>
  <field name="otheraccess" type="literal_value">iiiii</field>
  <field name="title" type="literal_value">clone to type</field>
  <field name="type_nodetype" type="noderef" type_nodetype="nodetype,nodetype">restricted_superdoc</field>
</NODE>
